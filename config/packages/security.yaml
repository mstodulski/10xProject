security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            lazy: true
            provider: user_provider
            context: shared
            entry_point: App\Security\ApiAuthenticationEntryPoint
            custom_authenticator: App\Security\LoginFormAuthenticator
            user_checker: App\Security\UserChecker
        main:
            lazy: true
            provider: user_provider
            context: shared
            form_login:
                login_path: login
                use_referer: true
                csrf_parameter: '_token'
                csrf_token_id: 'authenticate'
            logout:
                path: logout
                target: login
            login_throttling:
                max_attempts: 5
                interval: '15 minutes'
            custom_authenticator: App\Security\LoginFormAuthenticator
            user_checker: App\Security\UserChecker

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/authorize$, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/api/inspections$, roles: ROLE_USER, methods: [GET] }
        - { path: ^/api, roles: ROLE_USER }
        - { path: ^/, roles: [ ROLE_USER, ROLE_ADMIN ] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
